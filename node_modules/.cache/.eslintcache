[{"/Users/mariapires/Desktop/QuickCheck/src/index.js":"1","/Users/mariapires/Desktop/QuickCheck/src/App.js":"2","/Users/mariapires/Desktop/QuickCheck/src/reportWebVitals.js":"3","/Users/mariapires/Desktop/QuickCheck/src/Precautions.js":"4","/Users/mariapires/Desktop/QuickCheck/src/Diseases.js":"5","/Users/mariapires/Desktop/QuickCheck/src/SymptomPicker copy.js":"6"},{"size":492,"mtime":1622502437250,"results":"7","hashOfConfig":"8"},{"size":811,"mtime":1622556549375,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1622502437250,"results":"10","hashOfConfig":"8"},{"size":358,"mtime":1622502437248,"results":"11","hashOfConfig":"8"},{"size":258,"mtime":1622502437247,"results":"12","hashOfConfig":"8"},{"size":3932,"mtime":1622502437248,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"d3imm",{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"17"},"/Users/mariapires/Desktop/QuickCheck/src/index.js",["29","30"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css'; \nimport App from './App';\nimport Diseases from './Diseases';\nimport Precautions from './Precautions';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n\nreportWebVitals();\n",["31","32"],"/Users/mariapires/Desktop/QuickCheck/src/App.js",["33","34","35","36","37","38","39","40","41"],"/Users/mariapires/Desktop/QuickCheck/src/reportWebVitals.js",[],"/Users/mariapires/Desktop/QuickCheck/src/Precautions.js",[],"/Users/mariapires/Desktop/QuickCheck/src/Diseases.js",[],"/Users/mariapires/Desktop/QuickCheck/src/SymptomPicker copy.js",["42","43","44","45","46","47"],"\n/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './CSS/SymptomPicker.css';\nimport { borders } from '@material-ui/system';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, TableRow } from '@material-ui/core';\nimport { withStyles } from \"@material-ui/core/styles\";\n\n\nconst CustomAutocomplete = withStyles({\n    tag: {\n      backgroundColor: \"#1565D9\",\n      height: 25,\n      position: \"relative\",\n      zIndex: 0,\n      \"& .MuiChip-label\": {\n        color: \"#fff\"\n      },\n      \"& .MuiChip-deleteIcon\": {\n        color: \"#1565D9\"\n      },\n      \"&:after\": {\n        content: '\"\"',\n        right: 10,\n        top: 6,\n        height: 12,\n        width: 12,\n        position: \"absolute\",\n        backgroundColor: \"white\",\n        zIndex: -1\n      }\n    }\n  })(Autocomplete);\n\nconst useStyles = makeStyles({\n    root: {\n      outlineColor: '#1565D9',\n      border: 10,\n      borderRadius: 10,\n      borderColor: '#1565D9',\n      color: '#1565D9',\n      height: 48,\n    },\n    outlined: {\n        borderColor: \"#1565D9\",\n        color: \"#1565D9\",\n        borderRadius: 12,\n    }\n  });\n\n\n\nfunction SymptomPicker() {\n    const classes = useStyles();\n    const [selectedSymps, setSelectedSymps] = useState([]);\n    const [symptoms, setSymptoms] = useState([]);\n    const [predictions, setPredictions] = useState([]);\n\n\n    function printPredictions(value) {\n        fetch(\"/predict\", { method: 'POST', body: JSON.stringify({ symptoms: value }) }).then(\n            data => data.json().then(\n                data2 =>\n                    setPredictions(data2.list)\n            )\n        )\n    }\n\n    useEffect(() => {\n        fetch('/symptoms').then(res => res.json()).then(data => {\n            setSymptoms(data.symptoms);\n        });\n    }, []);\n    const getSymptoms = async function getSymptoms(c) {\n        fetch('/symptoms').then(res => res.json()).then(data => {\n            alert(data.symptoms)\n            setSymptoms(data.symptoms);\n\n        });\n    }\n\n    if (selectedSymps.length == 0 && predictions.length != 0) setPredictions([])\n\n\n    return (\n        <div className=\"symptomPicker\">\n            <div className='text'><p><b>  What symptoms is the patient experiencing? </b></p></div>\n            <Grid container spacing={1}>\n                <Grid item xs={9}>\n                    <CustomAutocomplete\n                        className=\"pickerBox pickerFrame\" \n                        multiple\n                        id=\"tags-outlined\"\n                        options={symptoms}\n                        getOptionLabel={(option) => option}\n                        defaultValue={[]}\n                        filterSelectedOptions\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                variant=\"outlined\"\n                                label=\"\" />\n                        )}\n                        onChange={(event, value) => setSelectedSymps(value)}\n                    />\n                </Grid>\n                <Grid item xs={3}>\n                    <Button className={classes.outlined}  variant=\"outlined\" color=\"primary\" onClick={printPredictions.bind(this, selectedSymps)} >Check The Symptoms</Button>\n                </Grid>\n            </Grid>\n\n            <div className=\"predictions\">\n                {predictions.length == 0 ? \"\" : <h3 style={{ fontWeight: 'bolder' }}> We recommend you prescribe  the following medical exams: </h3>}\n                <ul style={{ textAlign: 'left' }}>\n                    {predictions.map((elem) => <li><b>{elem}</b></li>)}\n                </ul>\n            </div>\n\n        </div>\n    )\n}\n\n\n\n\nexport default SymptomPicker;",{"ruleId":"48","severity":1,"message":"49","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":16},{"ruleId":"48","severity":1,"message":"52","line":6,"column":8,"nodeType":"50","messageId":"51","endLine":6,"endColumn":19},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"48","severity":1,"message":"57","line":2,"column":10,"nodeType":"50","messageId":"51","endLine":2,"endColumn":14},{"ruleId":"48","severity":1,"message":"58","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":16},{"ruleId":"48","severity":1,"message":"59","line":4,"column":10,"nodeType":"50","messageId":"51","endLine":4,"endColumn":19},{"ruleId":"48","severity":1,"message":"60","line":4,"column":21,"nodeType":"50","messageId":"51","endLine":4,"endColumn":29},{"ruleId":"48","severity":1,"message":"61","line":4,"column":31,"nodeType":"50","messageId":"51","endLine":4,"endColumn":40},{"ruleId":"48","severity":1,"message":"62","line":8,"column":7,"nodeType":"50","messageId":"51","endLine":8,"endColumn":9},{"ruleId":"48","severity":1,"message":"63","line":14,"column":7,"nodeType":"50","messageId":"51","endLine":14,"endColumn":12},{"ruleId":"64","severity":1,"message":"65","line":21,"column":7,"nodeType":"66","endLine":21,"endColumn":42},{"ruleId":"64","severity":1,"message":"65","line":31,"column":7,"nodeType":"66","endLine":31,"endColumn":42},{"ruleId":"48","severity":1,"message":"67","line":6,"column":10,"nodeType":"50","messageId":"51","endLine":6,"endColumn":17},{"ruleId":"48","severity":1,"message":"68","line":11,"column":16,"nodeType":"50","messageId":"51","endLine":11,"endColumn":24},{"ruleId":"48","severity":1,"message":"69","line":79,"column":11,"nodeType":"50","messageId":"51","endLine":79,"endColumn":22},{"ruleId":"70","severity":1,"message":"71","line":87,"column":30,"nodeType":"72","messageId":"73","endLine":87,"endColumn":32},{"ruleId":"70","severity":1,"message":"74","line":87,"column":57,"nodeType":"72","messageId":"73","endLine":87,"endColumn":59},{"ruleId":"70","severity":1,"message":"71","line":118,"column":37,"nodeType":"72","messageId":"73","endLine":118,"endColumn":39},"no-unused-vars","'Diseases' is defined but never used.","Identifier","unusedVar","'Precautions' is defined but never used.","no-native-reassign",["75"],"no-negated-in-lhs",["76"],"'Link' is defined but never used.","'render' is defined but never used.","'Component' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'fs' is assigned a value but never used.","'print' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'borders' is defined but never used.","'TableRow' is defined but never used.","'getSymptoms' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]